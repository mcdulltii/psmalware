[System.Reflection.Assembly]::LoadWithPartialName("System.Security") | Out-Null
[System.Reflection.Assembly]::LoadWithPartialName("System.IO") | Out-Null

function en ()
{
  param(
    [Parameter(Mandatory = $true)] [byte[]]$bEn,
    [Parameter(Mandatory = $true)] [byte[]]$ps,
    [Parameter(Mandatory = $true)] [ref]$enB,
    [Parameter(Mandatory = $false)] [byte[]]$cSalt
  )
  [byte[]]$encB = @()
  # Salt must have at least 8 Bytes!!
  # Encrypt and decrypt must use the same salt
  # Define your own Salt here
  [byte[]]$aSaltBytes = @(4,7,12,254,123,98,34,12,67,12,122,111)
  if ($cSalt.Count -ge 1)
  {
    $aSaltBytes = $cSalt
  }
  [System.IO.MemoryStream]$oMemoryStream = New-Object System.IO.MemoryStream
  [System.Security.Cryptography.RijndaelManaged]$oAES = New-Object System.Security.Cryptography.RijndaelManaged
  $oAES.KeySize = 256;
  $oAES.BlockSize = 128;
  [System.Security.Cryptography.Rfc2898DeriveBytes]$oKey = New-Object System.Security.Cryptography.Rfc2898DeriveBytes ($ps,$aSaltBytes,1000);
  $oAES.Key = $oKey.GetBytes($oAES.KeySize / 8);
  $oAES.IV = $oKey.GetBytes($oAES.BlockSize / 8);
  $oAES.Mode = [System.Security.Cryptography.CipherMode]::CBC
  $oCryptoStream = New-Object System.Security.Cryptography.CryptoStream ($oMemoryStream,$oAES.CreateEncryptor(),[System.Security.Cryptography.CryptoStreamMode]::Write)
  try
  {
    $oCryptoStream.Write($bEn,0,$bEn.Length);
    $oCryptoStream.Close();
  }
  catch [Exception]
  {
    $enB.Value = [System.Text.Encoding]::ASCII.GetBytes("Error occured while encoding string. Salt or Password incorrect?")
    return $false
  }
  $oencB = $oMemoryStream.ToArray();
  $enB.Value = $oencB;
  return $true
}

function de ()
{
  param(
    [Parameter(Mandatory = $true)] [byte[]]$bDe,
    [Parameter(Mandatory = $true)] [byte[]]$ps,
    [Parameter(Mandatory = $true)] [ref]$deB,
    [Parameter(Mandatory = $false)] [byte[]]$cSalt
  )
  [byte[]]$decB = @();
  # Salt must have at least 8 Bytes!!
  # Encrypt and decrypt must use the same salt
  [byte[]]$aSaltBytes = @(4,7,12,254,123,98,34,12,67,12,122,111)
  if ($cSalt.Count -ge 1)
  {
    $aSaltBytes = $cSalt
  }
  [System.IO.MemoryStream]$oMemoryStream = New-Object System.IO.MemoryStream
  [System.Security.Cryptography.RijndaelManaged]$oAES = New-Object System.Security.Cryptography.RijndaelManaged
  $oAES.KeySize = 256;
  $oAES.BlockSize = 128;
  [System.Security.Cryptography.Rfc2898DeriveBytes]$oKey = New-Object System.Security.Cryptography.Rfc2898DeriveBytes ($ps,$aSaltBytes,1000);
  $oAES.Key = $oKey.GetBytes($oAES.KeySize / 8);
  $oAES.IV = $oKey.GetBytes($oAES.BlockSize / 8);
  $oAES.Mode = [System.Security.Cryptography.CipherMode]::CBC
  $oCryptoStream = New-Object System.Security.Cryptography.CryptoStream ($oMemoryStream,$oAES.CreateDecryptor(),[System.Security.Cryptography.CryptoStreamMode]::Write)
  try
  {
    $oCryptoStream.Write($bDe,0,$bDe.Length)
    $oCryptoStream.Close()
  }
  catch [Exception]
  {
    $deB.Value = [System.Text.Encoding]::ASCII.GetBytes("Error occured while decoding string. Salt or Password incorrect?")
    return $false
  }
  $decB = $oMemoryStream.ToArray();
  $deB.Value = $decB
  return $true
}

